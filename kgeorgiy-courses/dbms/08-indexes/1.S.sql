-- Индексы на таблицу Students

-- Используем хеш индекс потому что у нас нет запросов на поиск
-- идентификаторов студентов из диапазона, поиска наименьшего или
-- наибольшего идентификатора и так далее. А для поиска конкретного
-- значения эффективнее использовать хеши.
-- ДЗ-5.1.1. Информация о студентах с заданным идентификатором.
-- ДЗ-5.2.1. Полная информация о студентах, заданных идентификатором.
-- ДЗ-5.3.1. Информация о студентах с заданной оценкой по дисциплине,
-- заданной идентификатором.
create unique index IdxStudentId on Students using hash (StudentId);

-- Используем btree индекс, как покрывающий, чтобы оптимальнее
-- выполнять natural join между Students и Plan, когда не требуется
-- имя студента. Сначала в индексе находится GroupId потому что в
-- основном при соединении Students с другими таблицами фильтрация
-- осуществляется по столбцам других таблиц, так что записи из
-- Students, скорее всего, будет эффективнее искать по GroupId
-- полученным после фильтрации записей из остальных таблиц, а так как
-- StudentName нужен не часто, достаточно такого индекса для
-- выполнения подобных запросов.
-- ДЗ-5.6.1. Идентификаторы студентов по преподавателю, имеющих хотя
-- бы одну оценку у преподавателя.
-- ДЗ-5.6.2. Идентификаторы студентов по преподавателю, не имеющих ни
-- одной оценки у преподавателя.
-- ДЗ-5.6.4. Идентификаторы студентов по преподавателю, имеющих
-- оценки по всем дисциплинам преподавателя, которые он вёл у этого
-- студента.
create unique index IdxGroupIdStudentId on Students using btree (GroupId, StudentId);

-- Хеш индекс более компактный и, как и в индексе по IdxStudentId, не
-- требуются запросы к диапазонам имен студентов или запросы на поиск
-- по префиксу имени.
-- ДЗ-5.1.2. Информация о студентах с заданным ФИО.
-- ДЗ-5.2.2. Полная информация о студентах с заданным ФИО.
-- ДЗ-5.8.2. Суммарный балл каждого студента.
create index IdxStudentName on Students using hash (StudentName);
